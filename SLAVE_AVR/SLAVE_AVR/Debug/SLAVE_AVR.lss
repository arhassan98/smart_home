
SLAVE_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000acc  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bd  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000070f  00000000  00000000  00001691  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001da0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000450  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007fa  00000000  00000000  000022d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002aca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 65 00 	call	0xca	; 0xca <main>
  64:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <HLED_Init>:
/*                         Functions' definitions                       */
/************************************************************************/
void HLED_Init(void)
{
	/* Setting LED1 as an output pin */
	MDIO_SetPinDirection(LED1_PORT, LED1_PIN, OUTPUT);
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	61 e0       	ldi	r22, 0x01	; 1
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	0e 94 8a 00 	call	0x114	; 0x114 <MDIO_SetPinDirection>

	/* Setting LED2 as an output pin */
	MDIO_SetPinDirection(LED2_PORT, LED2_PIN, OUTPUT);
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	62 e0       	ldi	r22, 0x02	; 2
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	0e 94 8a 00 	call	0x114	; 0x114 <MDIO_SetPinDirection>
  80:	08 95       	ret

00000082 <HLED_Value>:
}

void HLED_Value(u8_t LED, u8_t value)
{
	/* Switching over LEDs */
	switch(LED)
  82:	88 23       	and	r24, r24
  84:	19 f0       	breq	.+6      	; 0x8c <HLED_Value+0xa>
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	81 f0       	breq	.+32     	; 0xaa <HLED_Value+0x28>
  8a:	08 95       	ret
	{
		/* In case of LED1 */
		case LED1:
		
			/* Switching over LED values */
			switch(value)
  8c:	66 23       	and	r22, r22
  8e:	39 f0       	breq	.+14     	; 0x9e <HLED_Value+0x1c>
  90:	61 30       	cpi	r22, 0x01	; 1
  92:	d1 f4       	brne	.+52     	; 0xc8 <HLED_Value+0x46>
			{
				/* In case of HIGH value */
				case HIGH:
					/* Setting LED1 to HIGH value */
					MDIO_SetPinValue(LED1_PORT, LED1_PIN, HIGH);
  94:	41 e0       	ldi	r20, 0x01	; 1
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <MDIO_SetPinValue>
					break;
  9c:	08 95       	ret
			
				/* In case of LOW value */
				case LOW:
					/* Setting LED1 to LOW value */
					MDIO_SetPinValue(LED1_PORT, LED1_PIN, LOW);
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <MDIO_SetPinValue>
					break;
  a8:	08 95       	ret
		
		/* In case of LED2 */
		case LED2:
		
			/* Switching over LED values */
			switch(value)
  aa:	66 23       	and	r22, r22
  ac:	41 f0       	breq	.+16     	; 0xbe <HLED_Value+0x3c>
  ae:	61 30       	cpi	r22, 0x01	; 1
  b0:	59 f4       	brne	.+22     	; 0xc8 <HLED_Value+0x46>
			{
				/* In case of HIGH value */
				case HIGH:
				/* Setting LED2 to HIGH value */
				MDIO_SetPinValue(LED1_PORT, LED2_PIN, HIGH);
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <MDIO_SetPinValue>
				break;
  bc:	08 95       	ret
			
				/* In case of LOW value */
				case LOW:
				/* Setting LED2 to LOW value */
				MDIO_SetPinValue(LED1_PORT, LED2_PIN, LOW);
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	62 e0       	ldi	r22, 0x02	; 2
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <MDIO_SetPinValue>
  c8:	08 95       	ret

000000ca <main>:
{
	/* Local variable that will contains the received data from SPI module */
	u8_t rcvData = '0';
	
	/* Initializing SPI module */
	MSPI_SlaveInit();
  ca:	0e 94 2f 01 	call	0x25e	; 0x25e <MSPI_SlaveInit>
	
	/* Initializing LEDs */
	HLED_Init();
  ce:	0e 94 36 00 	call	0x6c	; 0x6c <HLED_Init>
	
	/* Infinite loop */
	while(1)
	{
		/* Receiving data from SPI module over specific pin (MISO)*/
		rcvData = MSPI_SlaveRcvByte();
  d2:	0e 94 3d 01 	call	0x27a	; 0x27a <MSPI_SlaveRcvByte>
		
		/* Switching over possible values */
		switch(rcvData)
  d6:	82 33       	cpi	r24, 0x32	; 50
  d8:	71 f0       	breq	.+28     	; 0xf6 <main+0x2c>
  da:	18 f4       	brcc	.+6      	; 0xe2 <main+0x18>
  dc:	81 33       	cpi	r24, 0x31	; 49
  de:	31 f0       	breq	.+12     	; 0xec <main+0x22>
  e0:	f8 cf       	rjmp	.-16     	; 0xd2 <main+0x8>
  e2:	83 33       	cpi	r24, 0x33	; 51
  e4:	69 f0       	breq	.+26     	; 0x100 <main+0x36>
  e6:	84 33       	cpi	r24, 0x34	; 52
  e8:	81 f0       	breq	.+32     	; 0x10a <main+0x40>
  ea:	f3 cf       	rjmp	.-26     	; 0xd2 <main+0x8>
		{
			/* In case of "1" value */
			case '1':
				/* Setting LED1 to LOW */
				HLED_Value(LED1, LOW);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 41 00 	call	0x82	; 0x82 <HLED_Value>
				break;
  f4:	ee cf       	rjmp	.-36     	; 0xd2 <main+0x8>
				
			/* In case of "2" value */
			case '2':
				/* Setting LED1 to HIGH */
				HLED_Value(LED1, HIGH);
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 41 00 	call	0x82	; 0x82 <HLED_Value>
				break;
  fe:	e9 cf       	rjmp	.-46     	; 0xd2 <main+0x8>
				
			/* In case of "3" value */
			case '3':
				/* Setting LED2 to LOW */
				HLED_Value(LED2, LOW);
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	0e 94 41 00 	call	0x82	; 0x82 <HLED_Value>
				break;
 108:	e4 cf       	rjmp	.-56     	; 0xd2 <main+0x8>
				
			/* In case of "4" value */
			case '4':
				/* Setting LED2 to HIGH */
				HLED_Value(LED2, HIGH);
 10a:	61 e0       	ldi	r22, 0x01	; 1
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 41 00 	call	0x82	; 0x82 <HLED_Value>
				break;	
 112:	df cf       	rjmp	.-66     	; 0xd2 <main+0x8>

00000114 <MDIO_SetPinDirection>:
/************************************************************************/

void MDIO_SetPinDirection(u8_t port, u8_t pin, u8_t pinDirection)
{
	/* Switching over DIO ports */
	switch(port)
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	f9 f0       	breq	.+62     	; 0x156 <MDIO_SetPinDirection+0x42>
 118:	30 f0       	brcs	.+12     	; 0x126 <MDIO_SetPinDirection+0x12>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	a1 f1       	breq	.+104    	; 0x186 <MDIO_SetPinDirection+0x72>
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	09 f4       	brne	.+2      	; 0x124 <MDIO_SetPinDirection+0x10>
 122:	49 c0       	rjmp	.+146    	; 0x1b6 <MDIO_SetPinDirection+0xa2>
 124:	08 95       	ret
	{
		/* In case of PORTA */
		case PORTA:
			/* Switching over pin directions */
			switch(pinDirection)
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	41 f0       	breq	.+16     	; 0x13a <MDIO_SetPinDirection+0x26>
 12a:	18 f0       	brcs	.+6      	; 0x132 <MDIO_SetPinDirection+0x1e>
 12c:	42 30       	cpi	r20, 0x02	; 2
 12e:	51 f0       	breq	.+20     	; 0x144 <MDIO_SetPinDirection+0x30>
 130:	08 95       	ret
			{
				/* In case of output direction */
				case OUTPUT:
					/* Setting dedicated pins in DDR register */
					MDIO_DDRA |= pin;
 132:	8a b3       	in	r24, 0x1a	; 26
 134:	68 2b       	or	r22, r24
 136:	6a bb       	out	0x1a, r22	; 26
					break;
 138:	08 95       	ret
				
				/* In case of input direction */
				case INPUT_FLOAT:
					/* Clearing dedicated pins in DDR register */
					MDIO_DDRA &= ~pin;
 13a:	8a b3       	in	r24, 0x1a	; 26
 13c:	60 95       	com	r22
 13e:	68 23       	and	r22, r24
 140:	6a bb       	out	0x1a, r22	; 26
					break;
 142:	08 95       	ret

				/* In case of input pull-up direction */					
				case INPUT_PULLUP:
					/* Clearing dedicated pins in DDR register */
					MDIO_DDRA &= ~pin;
 144:	8a b3       	in	r24, 0x1a	; 26
 146:	96 2f       	mov	r25, r22
 148:	90 95       	com	r25
 14a:	89 23       	and	r24, r25
 14c:	8a bb       	out	0x1a, r24	; 26
					
					/* Setting dedicated pins in DDR register */
					MDIO_PORTA |= pin;
 14e:	8b b3       	in	r24, 0x1b	; 27
 150:	68 2b       	or	r22, r24
 152:	6b bb       	out	0x1b, r22	; 27
					break;
 154:	08 95       	ret
			break;

		/* In case of PORTB */
		case PORTB:
			/* Switching over pin directions */
			switch(pinDirection)
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	41 f0       	breq	.+16     	; 0x16a <MDIO_SetPinDirection+0x56>
 15a:	18 f0       	brcs	.+6      	; 0x162 <MDIO_SetPinDirection+0x4e>
 15c:	42 30       	cpi	r20, 0x02	; 2
 15e:	51 f0       	breq	.+20     	; 0x174 <MDIO_SetPinDirection+0x60>
 160:	08 95       	ret
			{
				/* In case of output direction */
				case OUTPUT:
					/* Setting dedicated pins in DDR register */
					MDIO_DDRB |= pin;
 162:	87 b3       	in	r24, 0x17	; 23
 164:	68 2b       	or	r22, r24
 166:	67 bb       	out	0x17, r22	; 23
					break;
 168:	08 95       	ret
				
				/* In case of input direction */
				case INPUT_FLOAT:
					/* Clearing dedicated pins in DDR register */
					MDIO_DDRB &= ~pin;
 16a:	87 b3       	in	r24, 0x17	; 23
 16c:	60 95       	com	r22
 16e:	68 23       	and	r22, r24
 170:	67 bb       	out	0x17, r22	; 23
					break;
 172:	08 95       	ret

				/* In case of input pull-up direction */					
				case INPUT_PULLUP:
					/* Clearing dedicated pins in DDR register */
					MDIO_DDRB &= ~pin;
 174:	87 b3       	in	r24, 0x17	; 23
 176:	96 2f       	mov	r25, r22
 178:	90 95       	com	r25
 17a:	89 23       	and	r24, r25
 17c:	87 bb       	out	0x17, r24	; 23
					
					/* Setting dedicated pins in DDR register */
					MDIO_PORTB |= pin;
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	68 2b       	or	r22, r24
 182:	68 bb       	out	0x18, r22	; 24
					break;
 184:	08 95       	ret
			break;

		/* In case of PORTC */
		case PORTC:
			/* Switching over pin directions */
			switch(pinDirection)
 186:	41 30       	cpi	r20, 0x01	; 1
 188:	41 f0       	breq	.+16     	; 0x19a <MDIO_SetPinDirection+0x86>
 18a:	18 f0       	brcs	.+6      	; 0x192 <MDIO_SetPinDirection+0x7e>
 18c:	42 30       	cpi	r20, 0x02	; 2
 18e:	51 f0       	breq	.+20     	; 0x1a4 <MDIO_SetPinDirection+0x90>
 190:	08 95       	ret
			{
				/* In case of output direction */
				case OUTPUT:
					/* Setting dedicated pins in DDR register */
					MDIO_DDRC |= pin;
 192:	84 b3       	in	r24, 0x14	; 20
 194:	68 2b       	or	r22, r24
 196:	64 bb       	out	0x14, r22	; 20
					break;
 198:	08 95       	ret
				
				/* In case of input direction */
				case INPUT_FLOAT:
					/* Clearing dedicated pins in DDR register */
					MDIO_DDRC &= ~pin;
 19a:	84 b3       	in	r24, 0x14	; 20
 19c:	60 95       	com	r22
 19e:	68 23       	and	r22, r24
 1a0:	64 bb       	out	0x14, r22	; 20
					break;
 1a2:	08 95       	ret

				/* In case of input pull-up direction */					
				case INPUT_PULLUP:
					/* Clearing dedicated pins in DDR register */
					MDIO_DDRC &= ~pin;
 1a4:	84 b3       	in	r24, 0x14	; 20
 1a6:	96 2f       	mov	r25, r22
 1a8:	90 95       	com	r25
 1aa:	89 23       	and	r24, r25
 1ac:	84 bb       	out	0x14, r24	; 20
					
					/* Setting dedicated pins in DDR register */
					MDIO_PORTC |= pin;
 1ae:	85 b3       	in	r24, 0x15	; 21
 1b0:	68 2b       	or	r22, r24
 1b2:	65 bb       	out	0x15, r22	; 21
					break;
 1b4:	08 95       	ret
			break;

		/* In case of PORTD */
		case PORTD:
			/* Switching over pin directions */
			switch(pinDirection)
 1b6:	41 30       	cpi	r20, 0x01	; 1
 1b8:	41 f0       	breq	.+16     	; 0x1ca <MDIO_SetPinDirection+0xb6>
 1ba:	18 f0       	brcs	.+6      	; 0x1c2 <MDIO_SetPinDirection+0xae>
 1bc:	42 30       	cpi	r20, 0x02	; 2
 1be:	51 f0       	breq	.+20     	; 0x1d4 <MDIO_SetPinDirection+0xc0>
 1c0:	08 95       	ret
			{
				/* In case of output direction */
				case OUTPUT:
					/* Setting dedicated pins in DDR register */
					MDIO_DDRD |= pin;
 1c2:	81 b3       	in	r24, 0x11	; 17
 1c4:	68 2b       	or	r22, r24
 1c6:	61 bb       	out	0x11, r22	; 17
					break;
 1c8:	08 95       	ret
				
				/* In case of input direction */
				case INPUT_FLOAT:
					/* Clearing dedicated pins in DDR register */
					MDIO_DDRD &= ~pin;
 1ca:	81 b3       	in	r24, 0x11	; 17
 1cc:	60 95       	com	r22
 1ce:	68 23       	and	r22, r24
 1d0:	61 bb       	out	0x11, r22	; 17
					break;
 1d2:	08 95       	ret

				/* In case of input pull-up direction */					
				case INPUT_PULLUP:
					/* Clearing dedicated pins in DDR register */
					MDIO_DDRD &= ~pin;
 1d4:	81 b3       	in	r24, 0x11	; 17
 1d6:	96 2f       	mov	r25, r22
 1d8:	90 95       	com	r25
 1da:	89 23       	and	r24, r25
 1dc:	81 bb       	out	0x11, r24	; 17
					
					/* Setting dedicated pins in DDR register */
					MDIO_PORTD |= pin;
 1de:	82 b3       	in	r24, 0x12	; 18
 1e0:	68 2b       	or	r22, r24
 1e2:	62 bb       	out	0x12, r22	; 18
 1e4:	08 95       	ret

000001e6 <MDIO_SetPinValue>:
}

void MDIO_SetPinValue(u8_t port, u8_t pin, u8_t pinValue)
{
	/* Switching over DIO ports */
	switch(port)
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	99 f0       	breq	.+38     	; 0x210 <MDIO_SetPinValue+0x2a>
 1ea:	28 f0       	brcs	.+10     	; 0x1f6 <MDIO_SetPinValue+0x10>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	e9 f0       	breq	.+58     	; 0x22a <MDIO_SetPinValue+0x44>
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	41 f1       	breq	.+80     	; 0x244 <MDIO_SetPinValue+0x5e>
 1f4:	08 95       	ret
	{
		/* In case of PORTA */
		case PORTA:
			/* Switching over pin values */
			switch(pinValue)
 1f6:	44 23       	and	r20, r20
 1f8:	31 f0       	breq	.+12     	; 0x206 <MDIO_SetPinValue+0x20>
 1fa:	41 30       	cpi	r20, 0x01	; 1
 1fc:	79 f5       	brne	.+94     	; 0x25c <MDIO_SetPinValue+0x76>
			{
				/* In case of HIGH value */
				case HIGH:
					/* Setting dedicated pins in PORTA register */
					MDIO_PORTA |= pin;
 1fe:	8b b3       	in	r24, 0x1b	; 27
 200:	68 2b       	or	r22, r24
 202:	6b bb       	out	0x1b, r22	; 27
					break;
 204:	08 95       	ret
				
				/* In case of LOW value */
				case LOW:
					/* Clearing dedicated pins in PORTA register */
					MDIO_PORTA &= ~pin;
 206:	8b b3       	in	r24, 0x1b	; 27
 208:	60 95       	com	r22
 20a:	68 23       	and	r22, r24
 20c:	6b bb       	out	0x1b, r22	; 27
					break;
 20e:	08 95       	ret
			break;

		/* In case of PORTB */
		case PORTB:
			/* Switching over pin values */
			switch(pinValue)
 210:	44 23       	and	r20, r20
 212:	31 f0       	breq	.+12     	; 0x220 <MDIO_SetPinValue+0x3a>
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	11 f5       	brne	.+68     	; 0x25c <MDIO_SetPinValue+0x76>
			{
				/* In case of HIGH value */
				case HIGH:
					/* Setting dedicated pins in PORTB register */
					MDIO_PORTB |= pin;
 218:	88 b3       	in	r24, 0x18	; 24
 21a:	68 2b       	or	r22, r24
 21c:	68 bb       	out	0x18, r22	; 24
					break;
 21e:	08 95       	ret
				
				/* In case of LOW value */
				case LOW:
					/* Clearing dedicated pins in PORTB register */
					MDIO_PORTB &= ~pin;
 220:	88 b3       	in	r24, 0x18	; 24
 222:	60 95       	com	r22
 224:	68 23       	and	r22, r24
 226:	68 bb       	out	0x18, r22	; 24
					break;
 228:	08 95       	ret
			break;

		/* In case of PORTC */
		case PORTC:
			/* Switching over pin values */
			switch(pinValue)
 22a:	44 23       	and	r20, r20
 22c:	31 f0       	breq	.+12     	; 0x23a <MDIO_SetPinValue+0x54>
 22e:	41 30       	cpi	r20, 0x01	; 1
 230:	a9 f4       	brne	.+42     	; 0x25c <MDIO_SetPinValue+0x76>
			{
				/* In case of HIGH value */
				case HIGH:
					/* Setting dedicated pins in PORTC register */
					MDIO_PORTC |= pin;
 232:	85 b3       	in	r24, 0x15	; 21
 234:	68 2b       	or	r22, r24
 236:	65 bb       	out	0x15, r22	; 21
					break;
 238:	08 95       	ret
				
				/* In case of LOW value */
				case LOW:
					/* Clearing dedicated pins in PORTC register */
					MDIO_PORTC &= ~pin;
 23a:	85 b3       	in	r24, 0x15	; 21
 23c:	60 95       	com	r22
 23e:	68 23       	and	r22, r24
 240:	65 bb       	out	0x15, r22	; 21
					break;
 242:	08 95       	ret
			break;

		/* In case of PORTD */
		case PORTD:
			/* Switching over pin values */
			switch(pinValue)
 244:	44 23       	and	r20, r20
 246:	31 f0       	breq	.+12     	; 0x254 <MDIO_SetPinValue+0x6e>
 248:	41 30       	cpi	r20, 0x01	; 1
 24a:	41 f4       	brne	.+16     	; 0x25c <MDIO_SetPinValue+0x76>
			{
				/* In case of HIGH value */
				case HIGH:
					/* Setting dedicated pins in PORTD register */
					MDIO_PORTD |= pin;
 24c:	82 b3       	in	r24, 0x12	; 18
 24e:	68 2b       	or	r22, r24
 250:	62 bb       	out	0x12, r22	; 18
					break;
 252:	08 95       	ret
				
				/* In case of LOW value */
				case LOW:
					/* Clearing dedicated pins in PORTD register */
					MDIO_PORTD &= ~pin;
 254:	82 b3       	in	r24, 0x12	; 18
 256:	60 95       	com	r22
 258:	68 23       	and	r22, r24
 25a:	62 bb       	out	0x12, r22	; 18
 25c:	08 95       	ret

0000025e <MSPI_SlaveInit>:
/*                         Functions' definitions                       */
/************************************************************************/
void MSPI_SlaveInit()
{
	/* Setting MOSI, SCK and SS pins directions as output */
	MDIO_SetPinDirection(MSPI_PORT, MSPI_MOSI_PIN|MSPI_SCK_PIN|MSPI_SS_PIN, INPUT_FLOAT);
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	60 eb       	ldi	r22, 0xB0	; 176
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 8a 00 	call	0x114	; 0x114 <MDIO_SetPinDirection>
	
	/* Setting MISO pin direction as input float */
	MDIO_SetPinDirection(MSPI_PORT, MSPI_MISO_PIN, OUTPUT);
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	60 e4       	ldi	r22, 0x40	; 64
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 8a 00 	call	0x114	; 0x114 <MDIO_SetPinDirection>

	/* Enabling slave mode */
	SET_BIT(MSPI_SPCR, 6);
 272:	8d b1       	in	r24, 0x0d	; 13
 274:	80 64       	ori	r24, 0x40	; 64
 276:	8d b9       	out	0x0d, r24	; 13
 278:	08 95       	ret

0000027a <MSPI_SlaveRcvByte>:
}

u8_t MSPI_SlaveRcvByte(void)
{
	/* Local Variable used in timing out operations */
	u16_t timeoutVar = 0;
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0

	/* Waiting until data is received or timeout in 10ms */
	while( (GET_BIT(MSPI_SPSR, 7) == 0) && timeoutVar < 10000)
 27e:	05 c0       	rjmp	.+10     	; 0x28a <MSPI_SlaveRcvByte+0x10>
	{
		/*Increase timeout variable*/
		timeoutVar++;
 280:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	25 e0       	ldi	r18, 0x05	; 5
 284:	2a 95       	dec	r18
 286:	f1 f7       	brne	.-4      	; 0x284 <MSPI_SlaveRcvByte+0xa>
 288:	00 00       	nop
{
	/* Local Variable used in timing out operations */
	u16_t timeoutVar = 0;

	/* Waiting until data is received or timeout in 10ms */
	while( (GET_BIT(MSPI_SPSR, 7) == 0) && timeoutVar < 10000)
 28a:	77 99       	sbic	0x0e, 7	; 14
 28c:	04 c0       	rjmp	.+8      	; 0x296 <MSPI_SlaveRcvByte+0x1c>
 28e:	80 31       	cpi	r24, 0x10	; 16
 290:	27 e2       	ldi	r18, 0x27	; 39
 292:	92 07       	cpc	r25, r18
 294:	a8 f3       	brcs	.-22     	; 0x280 <MSPI_SlaveRcvByte+0x6>
		/*Delay for 1us*/
		_delay_us(1);
	}

	/* Return SPI master data */
	return MSPI_SPDR;
 296:	8f b1       	in	r24, 0x0f	; 15
 298:	08 95       	ret

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
