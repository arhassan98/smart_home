
MASTER_AVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000220  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c28  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008bb  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008e9  00000000  00000000  000018a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  0000218c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000524  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000902  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003106  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <HBLUETOOTH_Init>:
/************************************************************************/

void HBLUETOOTH_Init(void)
{
	/* Initializing UART with baud rate 9600 bps*/
	MUART_Init(MUART_9600_BPS);
  7c:	87 e6       	ldi	r24, 0x67	; 103
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <MUART_Init>
  84:	08 95       	ret

00000086 <HBLUETOOTH_RcvData>:
	/* Return from this function */
	return;
}

u8_t HBLUETOOTH_RcvData(void)
{
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	1f 92       	push	r1
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
	/* Local variable that will contains the received data from UART module */
	u8_t rcvDataFromUART = '0';
  90:	80 e3       	ldi	r24, 0x30	; 48
  92:	89 83       	std	Y+1, r24	; 0x01
	
	/* Receiving data from UART module over Rx line */
	MUART_RecvByte(&rcvDataFromUART);
  94:	ce 01       	movw	r24, r28
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	0e 94 08 01 	call	0x210	; 0x210 <MUART_RecvByte>
	
	/* Return from this function */
	return rcvDataFromUART;
  9c:	89 81       	ldd	r24, Y+1	; 0x01
  9e:	0f 90       	pop	r0
  a0:	df 91       	pop	r29
  a2:	cf 91       	pop	r28
  a4:	08 95       	ret

000000a6 <main>:
{
	/* Local variable that will contains the received data from bluetooth module */
	u8_t rcvData = '0';
	
	/* Initializing SPI module */
	MSPI_MasterInit(MSPI_SAMPLE_R_SETUP_F, MSPI_PRE_64);
  a6:	65 e0       	ldi	r22, 0x05	; 5
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 c9 00 	call	0x192	; 0x192 <MSPI_MasterInit>
	
	/* Initializing bluetooth module */
	HBLUETOOTH_Init();
  ae:	0e 94 3e 00 	call	0x7c	; 0x7c <HBLUETOOTH_Init>
	
	/* Infinite loop */
	while(1)
	{
		/* Receiving data from bluetooth module */
		rcvData = HBLUETOOTH_RcvData();
  b2:	0e 94 43 00 	call	0x86	; 0x86 <HBLUETOOTH_RcvData>
		
		if(rcvData != '0')
  b6:	80 33       	cpi	r24, 0x30	; 48
  b8:	e1 f3       	breq	.-8      	; 0xb2 <main+0xc>
		{
			/* Sending data to slave over SPI specific line (MOSI) */
			MSPI_MasterSendByte(rcvData);
  ba:	0e 94 e5 00 	call	0x1ca	; 0x1ca <MSPI_MasterSendByte>
  be:	f9 cf       	rjmp	.-14     	; 0xb2 <main+0xc>

000000c0 <MDIO_SetPinDirection>:
/************************************************************************/

void MDIO_SetPinDirection(u8_t port, u8_t pin, u8_t pinDirection)
{
	/* Switching over DIO ports */
	switch(port)
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	f9 f0       	breq	.+62     	; 0x102 <MDIO_SetPinDirection+0x42>
  c4:	30 f0       	brcs	.+12     	; 0xd2 <MDIO_SetPinDirection+0x12>
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	a1 f1       	breq	.+104    	; 0x132 <MDIO_SetPinDirection+0x72>
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	09 f4       	brne	.+2      	; 0xd0 <MDIO_SetPinDirection+0x10>
  ce:	49 c0       	rjmp	.+146    	; 0x162 <MDIO_SetPinDirection+0xa2>
  d0:	08 95       	ret
	{
		/* In case of PORTA */
		case PORTA:
			/* Switching over pin directions */
			switch(pinDirection)
  d2:	41 30       	cpi	r20, 0x01	; 1
  d4:	41 f0       	breq	.+16     	; 0xe6 <MDIO_SetPinDirection+0x26>
  d6:	18 f0       	brcs	.+6      	; 0xde <MDIO_SetPinDirection+0x1e>
  d8:	42 30       	cpi	r20, 0x02	; 2
  da:	51 f0       	breq	.+20     	; 0xf0 <MDIO_SetPinDirection+0x30>
  dc:	08 95       	ret
			{
				/* In case of output direction */
				case OUTPUT:
					/* Setting dedicated pins in DDR register */
					MDIO_DDRA |= pin;
  de:	8a b3       	in	r24, 0x1a	; 26
  e0:	68 2b       	or	r22, r24
  e2:	6a bb       	out	0x1a, r22	; 26
					break;
  e4:	08 95       	ret
				
				/* In case of input direction */
				case INPUT_FLOAT:
					/* Clearing dedicated pins in DDR register */
					MDIO_DDRA &= ~pin;
  e6:	8a b3       	in	r24, 0x1a	; 26
  e8:	60 95       	com	r22
  ea:	68 23       	and	r22, r24
  ec:	6a bb       	out	0x1a, r22	; 26
					break;
  ee:	08 95       	ret

				/* In case of input pull-up direction */					
				case INPUT_PULLUP:
					/* Clearing dedicated pins in DDR register */
					MDIO_DDRA &= ~pin;
  f0:	8a b3       	in	r24, 0x1a	; 26
  f2:	96 2f       	mov	r25, r22
  f4:	90 95       	com	r25
  f6:	89 23       	and	r24, r25
  f8:	8a bb       	out	0x1a, r24	; 26
					
					/* Setting dedicated pins in DDR register */
					MDIO_PORTA |= pin;
  fa:	8b b3       	in	r24, 0x1b	; 27
  fc:	68 2b       	or	r22, r24
  fe:	6b bb       	out	0x1b, r22	; 27
					break;
 100:	08 95       	ret
			break;

		/* In case of PORTB */
		case PORTB:
			/* Switching over pin directions */
			switch(pinDirection)
 102:	41 30       	cpi	r20, 0x01	; 1
 104:	41 f0       	breq	.+16     	; 0x116 <MDIO_SetPinDirection+0x56>
 106:	18 f0       	brcs	.+6      	; 0x10e <MDIO_SetPinDirection+0x4e>
 108:	42 30       	cpi	r20, 0x02	; 2
 10a:	51 f0       	breq	.+20     	; 0x120 <MDIO_SetPinDirection+0x60>
 10c:	08 95       	ret
			{
				/* In case of output direction */
				case OUTPUT:
					/* Setting dedicated pins in DDR register */
					MDIO_DDRB |= pin;
 10e:	87 b3       	in	r24, 0x17	; 23
 110:	68 2b       	or	r22, r24
 112:	67 bb       	out	0x17, r22	; 23
					break;
 114:	08 95       	ret
				
				/* In case of input direction */
				case INPUT_FLOAT:
					/* Clearing dedicated pins in DDR register */
					MDIO_DDRB &= ~pin;
 116:	87 b3       	in	r24, 0x17	; 23
 118:	60 95       	com	r22
 11a:	68 23       	and	r22, r24
 11c:	67 bb       	out	0x17, r22	; 23
					break;
 11e:	08 95       	ret

				/* In case of input pull-up direction */					
				case INPUT_PULLUP:
					/* Clearing dedicated pins in DDR register */
					MDIO_DDRB &= ~pin;
 120:	87 b3       	in	r24, 0x17	; 23
 122:	96 2f       	mov	r25, r22
 124:	90 95       	com	r25
 126:	89 23       	and	r24, r25
 128:	87 bb       	out	0x17, r24	; 23
					
					/* Setting dedicated pins in DDR register */
					MDIO_PORTB |= pin;
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	68 2b       	or	r22, r24
 12e:	68 bb       	out	0x18, r22	; 24
					break;
 130:	08 95       	ret
			break;

		/* In case of PORTC */
		case PORTC:
			/* Switching over pin directions */
			switch(pinDirection)
 132:	41 30       	cpi	r20, 0x01	; 1
 134:	41 f0       	breq	.+16     	; 0x146 <MDIO_SetPinDirection+0x86>
 136:	18 f0       	brcs	.+6      	; 0x13e <MDIO_SetPinDirection+0x7e>
 138:	42 30       	cpi	r20, 0x02	; 2
 13a:	51 f0       	breq	.+20     	; 0x150 <MDIO_SetPinDirection+0x90>
 13c:	08 95       	ret
			{
				/* In case of output direction */
				case OUTPUT:
					/* Setting dedicated pins in DDR register */
					MDIO_DDRC |= pin;
 13e:	84 b3       	in	r24, 0x14	; 20
 140:	68 2b       	or	r22, r24
 142:	64 bb       	out	0x14, r22	; 20
					break;
 144:	08 95       	ret
				
				/* In case of input direction */
				case INPUT_FLOAT:
					/* Clearing dedicated pins in DDR register */
					MDIO_DDRC &= ~pin;
 146:	84 b3       	in	r24, 0x14	; 20
 148:	60 95       	com	r22
 14a:	68 23       	and	r22, r24
 14c:	64 bb       	out	0x14, r22	; 20
					break;
 14e:	08 95       	ret

				/* In case of input pull-up direction */					
				case INPUT_PULLUP:
					/* Clearing dedicated pins in DDR register */
					MDIO_DDRC &= ~pin;
 150:	84 b3       	in	r24, 0x14	; 20
 152:	96 2f       	mov	r25, r22
 154:	90 95       	com	r25
 156:	89 23       	and	r24, r25
 158:	84 bb       	out	0x14, r24	; 20
					
					/* Setting dedicated pins in DDR register */
					MDIO_PORTC |= pin;
 15a:	85 b3       	in	r24, 0x15	; 21
 15c:	68 2b       	or	r22, r24
 15e:	65 bb       	out	0x15, r22	; 21
					break;
 160:	08 95       	ret
			break;

		/* In case of PORTD */
		case PORTD:
			/* Switching over pin directions */
			switch(pinDirection)
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	41 f0       	breq	.+16     	; 0x176 <MDIO_SetPinDirection+0xb6>
 166:	18 f0       	brcs	.+6      	; 0x16e <MDIO_SetPinDirection+0xae>
 168:	42 30       	cpi	r20, 0x02	; 2
 16a:	51 f0       	breq	.+20     	; 0x180 <MDIO_SetPinDirection+0xc0>
 16c:	08 95       	ret
			{
				/* In case of output direction */
				case OUTPUT:
					/* Setting dedicated pins in DDR register */
					MDIO_DDRD |= pin;
 16e:	81 b3       	in	r24, 0x11	; 17
 170:	68 2b       	or	r22, r24
 172:	61 bb       	out	0x11, r22	; 17
					break;
 174:	08 95       	ret
				
				/* In case of input direction */
				case INPUT_FLOAT:
					/* Clearing dedicated pins in DDR register */
					MDIO_DDRD &= ~pin;
 176:	81 b3       	in	r24, 0x11	; 17
 178:	60 95       	com	r22
 17a:	68 23       	and	r22, r24
 17c:	61 bb       	out	0x11, r22	; 17
					break;
 17e:	08 95       	ret

				/* In case of input pull-up direction */					
				case INPUT_PULLUP:
					/* Clearing dedicated pins in DDR register */
					MDIO_DDRD &= ~pin;
 180:	81 b3       	in	r24, 0x11	; 17
 182:	96 2f       	mov	r25, r22
 184:	90 95       	com	r25
 186:	89 23       	and	r24, r25
 188:	81 bb       	out	0x11, r24	; 17
					
					/* Setting dedicated pins in DDR register */
					MDIO_PORTD |= pin;
 18a:	82 b3       	in	r24, 0x12	; 18
 18c:	68 2b       	or	r22, r24
 18e:	62 bb       	out	0x12, r22	; 18
 190:	08 95       	ret

00000192 <MSPI_MasterInit>:
/************************************************************************/

void MSPI_MasterInit(u8_t dataMode, u8_t clkPrescaler)
{
	/* Enabling master mode, Sending MSB first and Setting data mode */
	MSPI_SPCR = (0x10) | (dataMode << 2);
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	22 0f       	add	r18, r18
 198:	33 1f       	adc	r19, r19
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	20 61       	ori	r18, 0x10	; 16
 1a0:	2d b9       	out	0x0d, r18	; 13
	
	/* Checking if the prescaler value is dividable by two or not */
	if( (dataMode % 2) == 0)
 1a2:	80 fd       	sbrc	r24, 0
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <MSPI_MasterInit+0x1a>
	{
		/* Enabling SPI double speed */
		SET_BIT(MSPI_SPSR, 0);
 1a6:	8e b1       	in	r24, 0x0e	; 14
 1a8:	81 60       	ori	r24, 0x01	; 1
 1aa:	8e b9       	out	0x0e, r24	; 14
	{
		/* Do nothing */
	}
	
	/* Setting SPI clock */
	MSPI_SPCR |= (clkPrescaler/2);
 1ac:	8d b1       	in	r24, 0x0d	; 13
 1ae:	66 95       	lsr	r22
 1b0:	68 2b       	or	r22, r24
 1b2:	6d b9       	out	0x0d, r22	; 13
	
	/* Setting MOSI, SCK and SS pins directions as output */
	MDIO_SetPinDirection(MSPI_PORT, MSPI_MOSI_PIN|MSPI_SCK_PIN|MSPI_SS_PIN, OUTPUT);
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	60 eb       	ldi	r22, 0xB0	; 176
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 60 00 	call	0xc0	; 0xc0 <MDIO_SetPinDirection>
	
	/* Setting MISO pin direction as input float */
	MDIO_SetPinDirection(MSPI_PORT, MSPI_MISO_PIN, INPUT_FLOAT);
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	60 e4       	ldi	r22, 0x40	; 64
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 60 00 	call	0xc0	; 0xc0 <MDIO_SetPinDirection>
 1c8:	08 95       	ret

000001ca <MSPI_MasterSendByte>:
	
	/* Variable used in timing out operations */
	u16_t timeoutVar = 0;
	
	/* Enabling SPI module */
	SET_BIT(MSPI_SPCR, 6);
 1ca:	9d b1       	in	r25, 0x0d	; 13
 1cc:	90 64       	ori	r25, 0x40	; 64
 1ce:	9d b9       	out	0x0d, r25	; 13
	
	/* Sending master data */
	MSPI_SPDR = data;
 1d0:	8f b9       	out	0x0f, r24	; 15
{
	/* Local variable used to save received data from slave */
	u8_t flushBuffer = 0;
	
	/* Variable used in timing out operations */
	u16_t timeoutVar = 0;
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
	
	/* Sending master data */
	MSPI_SPDR = data;
	
	/* Waiting until data is transmitted or timeout in 10ms */
	while( (GET_BIT(MSPI_SPSR, 7) == 0) && timeoutVar < 10000)
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <MSPI_MasterSendByte+0x18>
	{
		/* Increasing timeout variable */
		timeoutVar++;
 1d8:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	25 e0       	ldi	r18, 0x05	; 5
 1dc:	2a 95       	dec	r18
 1de:	f1 f7       	brne	.-4      	; 0x1dc <MSPI_MasterSendByte+0x12>
 1e0:	00 00       	nop
	
	/* Sending master data */
	MSPI_SPDR = data;
	
	/* Waiting until data is transmitted or timeout in 10ms */
	while( (GET_BIT(MSPI_SPSR, 7) == 0) && timeoutVar < 10000)
 1e2:	77 99       	sbic	0x0e, 7	; 14
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <MSPI_MasterSendByte+0x24>
 1e6:	80 31       	cpi	r24, 0x10	; 16
 1e8:	27 e2       	ldi	r18, 0x27	; 39
 1ea:	92 07       	cpc	r25, r18
 1ec:	a8 f3       	brcs	.-22     	; 0x1d8 <MSPI_MasterSendByte+0xe>
		/* Delay for 1us */
		_delay_us(1);
	}
	
	/* Assigning the data received from slave */
	flushBuffer = MSPI_SPDR;
 1ee:	8f b1       	in	r24, 0x0f	; 15
	
	/* Disabling SPI module */
	CLEAR_BIT(MSPI_SPCR, 6);
 1f0:	8d b1       	in	r24, 0x0d	; 13
 1f2:	8f 7b       	andi	r24, 0xBF	; 191
 1f4:	8d b9       	out	0x0d, r24	; 13
 1f6:	08 95       	ret

000001f8 <MUART_Init>:
	{
		/* Transmitting data over Tx pin */
		MUART_UDR = data;
		
		/* Making sure that the data has been transmitted or timeout happens */
		while((GET_BIT(MUART_UCSRA, 6) == 0) && timeoutVar < 10)
 1f8:	1b b8       	out	0x0b, r1	; 11
 1fa:	2a b1       	in	r18, 0x0a	; 10
 1fc:	20 61       	ori	r18, 0x10	; 16
 1fe:	2a b9       	out	0x0a, r18	; 10
 200:	2a b1       	in	r18, 0x0a	; 10
 202:	28 60       	ori	r18, 0x08	; 8
 204:	2a b9       	out	0x0a, r18	; 10
 206:	26 e8       	ldi	r18, 0x86	; 134
 208:	20 bd       	out	0x20, r18	; 32
 20a:	89 b9       	out	0x09, r24	; 9
 20c:	90 bd       	out	0x20, r25	; 32
 20e:	08 95       	ret

00000210 <MUART_RecvByte>:
}

void MUART_RecvByte(u8_t* data)
{
	/* Checking that there's a new data or not */
	if(GET_BIT(MUART_UCSRA, 7))
 210:	5f 9b       	sbis	0x0b, 7	; 11
 212:	03 c0       	rjmp	.+6      	; 0x21a <MUART_RecvByte+0xa>
	{
		/* Reading the new data */
		*data = MUART_UDR;
 214:	2c b1       	in	r18, 0x0c	; 12
 216:	fc 01       	movw	r30, r24
 218:	20 83       	st	Z, r18
 21a:	08 95       	ret

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
